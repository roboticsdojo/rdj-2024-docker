# Starting from official ROS Repository
FROM ros:humble


# Update system
RUN apt update && apt upgrade -y


# ROS2 tools and dependencies
RUN apt install -y \
    ros-humble-demo-nodes-cpp \
    ros-humble-demo-nodes-py \
    ros-humble-rviz2 \
    ros-humble-rqt \
    ros-humble-joint-state-publisher-gui \
    ros-humble-ros-gz

  
# ROS2 build tools and dependencies
RUN apt install -y \
    python3-colcon-common-extensions \ 
    ros-humble-rmw-cyclonedds-cpp


# Navigation Stack
RUN apt install -y \
    ros-humble-navigation2 \
    ros-humble-nav2-bringup

# Turtlebot3 (for navigation demo)
RUN apt install -y \
    ros-humble-turtlebot3*


# Linux tools and dependencies
RUN apt install -y \
    nano \
    gedit \
    x11-apps \
    mesa-utils \
    libgl1-mesa-glx \
    libgl1-mesa-dri


RUN apt-get update && \
    apt-get install -y xfce4 xfce4-goodies tightvncserver

# Set up VNC server
RUN mkdir -p ~/.vnc && \
    echo "rdj-2024" | vncpasswd -f > ~/.vnc/passwd && \
    chmod 600 ~/.vnc/passwd    

# Set Environment Variables
RUN echo "export TURTLEBOT3_MODEL=waffle" >> ~/.bashrc && \
    echo "export GAZEBO_MODEL_PATH=$GAZEBO_MODEL_PATH:/opt/ros/humble/share/turtlebot3_gazebo/models" >> ~/.bashrc && \
    echo "export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp"


# Add ROS2 source to bashrc
RUN echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc


# Modify waffle.yaml file (Cyclone DDS Recommended for Nav2)
RUN sed -i 's/robot_model_type: "differential"/robot_model_type: "nav2_amcl::DifferentialMotionModel"/g' /opt/ros/humble/share/turtlebot3_navigation2/param/waffle.yaml


# Set up the environment
WORKDIR /home/rdj-2024


# Set the USER environment variable
ENV USER=rdj-2024

# Set the DISPLAY environment variable
# ENV DISPLAY=:1


# Startup script to display welcome message and start the VNC server
RUN echo '#!/bin/bash' > /start-vnc.sh && \
    # echo 'xauth generate :1 . trusted' >> /start-vnc.sh && \
    echo 'echo "ðŸ¤– You have successfully pulled and run the ROS2 Docker image for ARM!"' >> /start-vnc.sh && \
    echo 'vncserver -geometry 1280x800' >> /start-vnc.sh && \
    echo 'tail -f /dev/null' >> /start-vnc.sh && \
    chmod +x /start-vnc.sh


# uns the startup script
ENTRYPOINT ["/start-vnc.sh"]


# Attach a shell to the container
CMD ["/bin/bash"]